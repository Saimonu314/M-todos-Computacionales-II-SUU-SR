# -*- coding: utf-8 -*-
"""Taller 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1awV16tHEk4IWv9S1Y0E_1M7pUkwD5sJY
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import scipy as sci

Mo1=pd.read_csv('Mo_10kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo1.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo2=pd.read_csv('Mo_11kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo2.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo3=pd.read_csv('Mo_12kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo3.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo4=pd.read_csv('Mo_13kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo4.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo5=pd.read_csv('Mo_14kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo5.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo6=pd.read_csv('Mo_15kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo6.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo7=pd.read_csv('Mo_16kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo7.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo8=pd.read_csv('Mo_17kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo8.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo9=pd.read_csv('Mo_18kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo9.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo10=pd.read_csv('Mo_19kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo10.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo11=pd.read_csv('Mo_20kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo11.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo12=pd.read_csv('Mo_21kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo12.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo13=pd.read_csv('Mo_22kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo13.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo14=pd.read_csv('Mo_23kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo14.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo15=pd.read_csv('Mo_24kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo15.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo16=pd.read_csv('Mo_25kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo16.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo17=pd.read_csv('Mo_26kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo17.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo18=pd.read_csv('Mo_27kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo18.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo19=pd.read_csv('Mo_28kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo19.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo20=pd.read_csv('Mo_29kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo20.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo21=pd.read_csv('Mo_30kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo21.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo22=pd.read_csv('Mo_31kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo22.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo23=pd.read_csv('Mo_32kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo23.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo24=pd.read_csv('Mo_33kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo24.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo25=pd.read_csv('Mo_34kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo25.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo26=pd.read_csv('Mo_35kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo26.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo27=pd.read_csv('Mo_36kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo27.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo28=pd.read_csv('Mo_37kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo28.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo29=pd.read_csv('Mo_38kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo29.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo30=pd.read_csv('Mo_39kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo30.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo31=pd.read_csv('Mo_40kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo31.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo32=pd.read_csv('Mo_41kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo32.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo33=pd.read_csv('Mo_42kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo33.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo34=pd.read_csv('Mo_43kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo34.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo35=pd.read_csv('Mo_44kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo35.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo36=pd.read_csv('Mo_45kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo36.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo37=pd.read_csv('Mo_46kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo37.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo38=pd.read_csv('Mo_47kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo38.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo39=pd.read_csv('Mo_48kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo39.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo40=pd.read_csv('Mo_49kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo40.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Mo41=pd.read_csv('Mo_50kV.dat', skiprows=13, encoding='latin1', sep="\t")
Mo41.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']

MO=[]
MO.append(Mo1)
MO.append(Mo2)
MO.append(Mo3)
MO.append(Mo4)
MO.append(Mo5)
MO.append(Mo6)
MO.append(Mo7)
MO.append(Mo8)
MO.append(Mo9)
MO.append(Mo10)
MO.append(Mo11)
MO.append(Mo12)
MO.append(Mo13)
MO.append(Mo14)
MO.append(Mo15)
MO.append(Mo16)
MO.append(Mo17)
MO.append(Mo18)
MO.append(Mo19)
MO.append(Mo20)
MO.append(Mo21)
MO.append(Mo22)
MO.append(Mo23)
MO.append(Mo24)
MO.append(Mo25)
MO.append(Mo26)
MO.append(Mo27)
MO.append(Mo28)
MO.append(Mo29)
MO.append(Mo30)
MO.append(Mo31)
MO.append(Mo32)
MO.append(Mo33)
MO.append(Mo34)
MO.append(Mo35)
MO.append(Mo36)
MO.append(Mo37)
MO.append(Mo38)
MO.append(Mo39)
MO.append(Mo40)
MO.append(Mo41)

for i in range (15,20):
  plt.plot(MO[i]['Energía (keV)'], MO[i]['Intensidad (photons keV^-1 cm^-2)'], label=str(i+1)+' keV')

Rh1=pd.read_csv('Rh_10kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh1.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh2=pd.read_csv('Rh_11kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh2.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh3=pd.read_csv('Rh_12kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh3.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh4=pd.read_csv('Rh_13kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh4.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh5=pd.read_csv('Rh_14kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh5.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh6=pd.read_csv('Rh_15kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh6.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh7=pd.read_csv('Rh_16kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh7.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh8=pd.read_csv('Rh_17kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh8.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh9=pd.read_csv('Rh_18kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh9.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh10=pd.read_csv('Rh_19kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh10.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh11=pd.read_csv('Rh_20kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh11.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh12=pd.read_csv('Rh_21kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh12.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh13=pd.read_csv('Rh_22kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh13.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh14=pd.read_csv('Rh_23kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh14.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh15=pd.read_csv('Rh_24kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh15.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh16=pd.read_csv('Rh_25kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh16.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh17=pd.read_csv('Rh_26kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh17.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh18=pd.read_csv('Rh_27kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh18.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh19=pd.read_csv('Rh_28kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh19.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh20=pd.read_csv('Rh_29kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh20.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh21=pd.read_csv('Rh_30kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh21.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh22=pd.read_csv('Rh_31kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh22.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh23=pd.read_csv('Rh_32kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh23.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh24=pd.read_csv('Rh_33kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh24.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh25=pd.read_csv('Rh_34kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh25.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh26=pd.read_csv('Rh_35kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh26.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh27=pd.read_csv('Rh_36kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh27.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh28=pd.read_csv('Rh_37kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh28.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh29=pd.read_csv('Rh_38kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh29.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh30=pd.read_csv('Rh_39kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh30.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh31=pd.read_csv('Rh_40kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh31.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh32=pd.read_csv('Rh_41kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh32.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh33=pd.read_csv('Rh_42kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh33.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh34=pd.read_csv('Rh_43kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh34.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh35=pd.read_csv('Rh_44kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh35.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh36=pd.read_csv('Rh_45kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh36.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh37=pd.read_csv('Rh_46kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh37.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh38=pd.read_csv('Rh_47kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh38.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh39=pd.read_csv('Rh_48kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh39.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh40=pd.read_csv('Rh_49kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh40.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
Rh41=pd.read_csv('Rh_50kV.dat', skiprows=13, encoding='latin1', sep="\t")
Rh41.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']

RH=[]
RH.append(Rh1)
RH.append(Rh2)
RH.append(Rh3)
RH.append(Rh4)
RH.append(Rh5)
RH.append(Rh6)
RH.append(Rh7)
RH.append(Rh8)
RH.append(Rh9)
RH.append(Rh10)
RH.append(Rh11)
RH.append(Rh12)
RH.append(Rh13)
RH.append(Rh14)
RH.append(Rh15)
RH.append(Rh16)
RH.append(Rh17)
RH.append(Rh18)
RH.append(Rh19)
RH.append(Rh20)
RH.append(Rh21)
RH.append(Rh22)
RH.append(Rh23)
RH.append(Rh24)
RH.append(Rh25)
RH.append(Rh26)
RH.append(Rh27)
RH.append(Rh28)
RH.append(Rh29)
RH.append(Rh30)
RH.append(Rh31)
RH.append(Rh32)
RH.append(Rh33)
RH.append(Rh34)
RH.append(Rh35)
RH.append(Rh36)
RH.append(Rh37)
RH.append(Rh38)
RH.append(Rh39)
RH.append(Rh40)
RH.append(Rh41)

for i in range (0,41):
  plt.plot(RH[i]['Energía (keV)'], RH[i]['Intensidad (photons keV^-1 cm^-2)'], label=str(i+1)+' keV')

W1=pd.read_csv('W_10kV.dat', skiprows=13, encoding='latin1', sep="\t")
W1.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W2=pd.read_csv('W_11kV.dat', skiprows=13, encoding='latin1', sep="\t")
W2.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W3=pd.read_csv('W_12kV.dat', skiprows=13, encoding='latin1', sep="\t")
W3.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W4=pd.read_csv('W_13kV.dat', skiprows=13, encoding='latin1', sep="\t")
W4.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W5=pd.read_csv('W_14kV.dat', skiprows=13, encoding='latin1', sep="\t")
W5.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W6=pd.read_csv('W_15kV.dat', skiprows=13, encoding='latin1', sep="\t")
W6.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W7=pd.read_csv('W_16kV.dat', skiprows=13, encoding='latin1', sep="\t")
W7.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W8=pd.read_csv('W_17kV.dat', skiprows=13, encoding='latin1', sep="\t")
W8.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W9=pd.read_csv('W_18kV.dat', skiprows=13, encoding='latin1', sep="\t")
W9.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W10=pd.read_csv('W_19kV.dat', skiprows=13, encoding='latin1', sep="\t")
W10.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W11=pd.read_csv('W_20kV.dat', skiprows=13, encoding='latin1', sep="\t")
W11.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W12=pd.read_csv('W_21kV.dat', skiprows=13, encoding='latin1', sep="\t")
W12.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W13=pd.read_csv('W_22kV.dat', skiprows=13, encoding='latin1', sep="\t")
W13.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W14=pd.read_csv('W_23kV.dat', skiprows=13, encoding='latin1', sep="\t")
W14.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W15=pd.read_csv('W_24kV.dat', skiprows=13, encoding='latin1', sep="\t")
W15.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W16=pd.read_csv('W_25kV.dat', skiprows=13, encoding='latin1', sep="\t")
W16.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W17=pd.read_csv('W_26kV.dat', skiprows=13, encoding='latin1', sep="\t")
W17.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W18=pd.read_csv('W_27kV.dat', skiprows=13, encoding='latin1', sep="\t")
W18.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W19=pd.read_csv('W_28kV.dat', skiprows=13, encoding='latin1', sep="\t")
W19.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W20=pd.read_csv('W_29kV.dat', skiprows=13, encoding='latin1', sep="\t")
W20.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W21=pd.read_csv('W_30kV.dat', skiprows=13, encoding='latin1', sep="\t")
W21.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W22=pd.read_csv('W_31kV.dat', skiprows=13, encoding='latin1', sep="\t")
W22.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W23=pd.read_csv('W_32kV.dat', skiprows=13, encoding='latin1', sep="\t")
W23.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W24=pd.read_csv('W_33kV.dat', skiprows=13, encoding='latin1', sep="\t")
W24.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W25=pd.read_csv('W_34kV.dat', skiprows=13, encoding='latin1', sep="\t")
W25.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W26=pd.read_csv('W_35kV.dat', skiprows=13, encoding='latin1', sep="\t")
W26.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W27=pd.read_csv('W_36kV.dat', skiprows=13, encoding='latin1', sep="\t")
W27.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W28=pd.read_csv('W_37kV.dat', skiprows=13, encoding='latin1', sep="\t")
W28.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W29=pd.read_csv('W_38kV.dat', skiprows=13, encoding='latin1', sep="\t")
W29.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W30=pd.read_csv('W_39kV.dat', skiprows=13, encoding='latin1', sep="\t")
W30.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W31=pd.read_csv('W_40kV.dat', skiprows=13, encoding='latin1', sep="\t")
W31.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W32=pd.read_csv('W_41kV.dat', skiprows=13, encoding='latin1', sep="\t")
W32.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W33=pd.read_csv('W_42kV.dat', skiprows=13, encoding='latin1', sep="\t")
W33.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W34=pd.read_csv('W_43kV.dat', skiprows=13, encoding='latin1', sep="\t")
W34.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W35=pd.read_csv('W_44kV.dat', skiprows=13, encoding='latin1', sep="\t")
W35.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W36=pd.read_csv('W_45kV.dat', skiprows=13, encoding='latin1', sep="\t")
W36.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W37=pd.read_csv('W_46kV.dat', skiprows=13, encoding='latin1', sep="\t")
W37.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W38=pd.read_csv('W_47kV.dat', skiprows=13, encoding='latin1', sep="\t")
W38.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W39=pd.read_csv('W_48kV.dat', skiprows=13, encoding='latin1', sep="\t")
W39.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W40=pd.read_csv('W_49kV.dat', skiprows=13, encoding='latin1', sep="\t")
W40.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']
W41=pd.read_csv('W_50kV.dat', skiprows=13, encoding='latin1', sep="\t")
W41.columns=['Energía (keV)', 'Intensidad (photons keV^-1 cm^-2)']

W=[]
W.append(W1)
W.append(W2)
W.append(W3)
W.append(W4)
W.append(W5)
W.append(W6)
W.append(W7)
W.append(W8)
W.append(W9)
W.append(W10)
W.append(W11)
W.append(W12)
W.append(W13)
W.append(W14)
W.append(W15)
W.append(W16)
W.append(W17)
W.append(W18)
W.append(W19)
W.append(W20)
W.append(W21)
W.append(W22)
W.append(W23)
W.append(W24)
W.append(W25)
W.append(W26)
W.append(W27)
W.append(W28)
W.append(W29)
W.append(W30)
W.append(W31)
W.append(W32)
W.append(W33)
W.append(W34)
W.append(W35)
W.append(W36)
W.append(W37)
W.append(W38)
W.append(W39)
W.append(W40)
W.append(W41)

for i in range (0,41):
  plt.plot(W[i]['Energía (keV)'], W[i]['Intensidad (photons keV^-1 cm^-2)'], label=str(i+1)+' keV')

MOP1=MO[0]
MOP2=MO[10]
MOP3=MO[20]
MOP4=MO[30]
MOP5=MO[40]
RHP1=RH[0]
RHP2=RH[10]
RHP3=RH[20]
RHP4=RH[30]
RHP5=RH[40]
WP1=W[0]
WP2=W[10]
WP3=W[20]
WP4=W[30]
WP5=W[40]


fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 10),gridspec_kw={'height_ratios': [3, 3, 3]})


ax1.plot(MOP1['Energía (keV)'], MOP1['Intensidad (photons keV^-1 cm^-2)'], color="red", label="Tubo de 10kV")
ax1.plot(MOP2['Energía (keV)'], MOP2['Intensidad (photons keV^-1 cm^-2)'], color="orange", label="Tubo de 20kV")
ax1.plot(MOP3['Energía (keV)'], MOP3['Intensidad (photons keV^-1 cm^-2)'], color="yellowgreen", label="Tubo de 30kV")
ax1.plot(MOP4['Energía (keV)'], MOP4['Intensidad (photons keV^-1 cm^-2)'], color="teal", label="Tubo de 40kV")
ax1.plot(MOP5['Energía (keV)'], MOP5['Intensidad (photons keV^-1 cm^-2)'], color="purple", label="Tubo de 50kV")
ax1.set_title("Tubo de Molibdeno (Mo)")
ax2.plot(RHP1['Energía (keV)'], RHP1['Intensidad (photons keV^-1 cm^-2)'], color="maroon", label="Tubo de 10kV")
ax2.plot(RHP2['Energía (keV)'], RHP2['Intensidad (photons keV^-1 cm^-2)'], color="orangered", label="Tubo de 20kV")
ax2.plot(RHP3['Energía (keV)'], RHP3['Intensidad (photons keV^-1 cm^-2)'], color="green", label="Tubo de 30kV")
ax2.plot(RHP4['Energía (keV)'], RHP4['Intensidad (photons keV^-1 cm^-2)'], color="navy", label="Tubo de 40kV")
ax2.plot(RHP5['Energía (keV)'], RHP5['Intensidad (photons keV^-1 cm^-2)'], color="indigo", label="Tubo de 50kV")
ax2.set_title("Tubo de Rodio (Rh)")
ax3.plot(WP1['Energía (keV)'], WP1['Intensidad (photons keV^-1 cm^-2)'], color="brown", label="Tubo de 10kV")
ax3.plot(WP2['Energía (keV)'], WP2['Intensidad (photons keV^-1 cm^-2)'], color="coral", label="Tubo de 20kV")
ax3.plot(WP3['Energía (keV)'], WP3['Intensidad (photons keV^-1 cm^-2)'], color="olive", label="Tubo de 30kV")
ax3.plot(WP4['Energía (keV)'], WP4['Intensidad (photons keV^-1 cm^-2)'], color="lightseagreen", label="Tubo de 40kV")
ax3.plot(WP5['Energía (keV)'], WP5['Intensidad (photons keV^-1 cm^-2)'], color="violet", label="Tubo de 50kV")
ax3.set_title("Tubo de Tungsteno (W)")
plt.xlabel("Energía (keV)")
plt.ylabel("Intensidad (photons keV^-1 cm^-2)", loc="bottom")
fig.suptitle("Espectros de tubos de rayos X")
ax1.legend()
ax2.legend()
ax3.legend()
plt.savefig("1.pdf", bbox_inches="tight", pad_inches=0.1)

fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 10),gridspec_kw={'height_ratios': [3, 3, 3]})

n1=65
m1=73
n2=76
m2=81
MOC4={'Energía (keV)': [], 'Intensidad (photons keV^-1 cm^-2)': []}


for i in range(0,len(MOP4['Energía (keV)'])):
  if (i>n1 and i<m1) or (i>n2 and i<m2):
    None
  else:
    MOC4["Energía (keV)"].append(MOP4["Energía (keV)"][i])
    MOC4["Intensidad (photons keV^-1 cm^-2)"].append(MOP4["Intensidad (photons keV^-1 cm^-2)"][i])

PicoMO1=MOP4[n1:m1]
PicoMO2=MOP4[n2:m2]

#MOC4 barriga

ax1.scatter(MOP4[n2:m2]['Energía (keV)'], MOP4[n2:m2]['Intensidad (photons keV^-1 cm^-2)'], color="gold")
ax1.scatter(MOP4[n1:m1]['Energía (keV)'], MOP4[n1:m1]['Intensidad (photons keV^-1 cm^-2)'], color="gold", label="Picos Removidos (tanteo)")
ax1.plot(MOC4['Energía (keV)'][:n1+1], MOC4['Intensidad (photons keV^-1 cm^-2)'][:n1+1], color="orange", label="Barriga")
ax1.plot(MOC4['Energía (keV)'][n1+1:n2-(m1-n1)+1], MOC4['Intensidad (photons keV^-1 cm^-2)'][n1+1:n2-(m1-n1)+1], color="orange")
ax1.plot(MOC4['Energía (keV)'][n2-(m1-n1)+(m2-n2)-1:], MOC4['Intensidad (photons keV^-1 cm^-2)'][n2-(m1-n1)+(m2-n2)-1:], color="orange")
ax1.scatter(MOC4['Energía (keV)'], MOC4['Intensidad (photons keV^-1 cm^-2)'], color="orange", s=7)
ax1.set_title("Tubo de Molibdeno (Mo) 40kV")

RHC5={'Energía (keV)': [], 'Intensidad (photons keV^-1 cm^-2)': []}

def lineal (x, a,b):
  return a*x+b

tolerancia = 2.5

def distancia(x, y, m, b):
    return abs(m * x - y + b) / ((m**2 + 1)**(1/2))

import scipy.optimize as opt
params, cov= opt.curve_fit(lineal, RHP5['Energía (keV)'][100:], RHP5['Intensidad (photons keV^-1 cm^-2)'][100:])

RHpicos={'Energía (keV)': [], 'Intensidad (photons keV^-1 cm^-2)': []}

for i in range(0,len(RHP5['Energía (keV)'])):
  if i>30 and i<110:
    if distancia(RHP5['Energía (keV)'][i], RHP5['Intensidad (photons keV^-1 cm^-2)'][i], params[0], params[1]) <= tolerancia:
      RHC5["Energía (keV)"].append(RHP5["Energía (keV)"][i])
      RHC5["Intensidad (photons keV^-1 cm^-2)"].append(RHP5["Intensidad (photons keV^-1 cm^-2)"][i])
    else:
      RHpicos["Energía (keV)"].append(RHP5["Energía (keV)"][i])
      RHpicos["Intensidad (photons keV^-1 cm^-2)"].append(RHP5["Intensidad (photons keV^-1 cm^-2)"][i])
  else:
    RHC5["Energía (keV)"].append(RHP5["Energía (keV)"][i])
    RHC5["Intensidad (photons keV^-1 cm^-2)"].append(RHP5["Intensidad (photons keV^-1 cm^-2)"][i])

ax2.scatter(RHpicos["Energía (keV)"], RHpicos["Intensidad (photons keV^-1 cm^-2)"], color="yellowgreen", label="Picos Removidos (tolerancia a regresión)")
ax2.plot(RHC5['Energía (keV)'], RHC5['Intensidad (photons keV^-1 cm^-2)'], color="green", label="Barriga")
ax2.scatter(RHC5['Energía (keV)'], RHC5['Intensidad (photons keV^-1 cm^-2)'], color="green", s=7)
ax2.plot(RHP5['Energía (keV)'], lineal(RHP5['Energía (keV)'], *params), c="teal", label="Regresión:"+str(round(params[0],2))+"x+"+str(round(params[1],2)))
ax2.set_title("Tubo de Rodio (Rh) 50kV")

WC3={'Energía (keV)': [], 'Intensidad (photons keV^-1 cm^-2)': []}
Wpicos={'Energía (keV)': [], 'Intensidad (photons keV^-1 cm^-2)': []}

for i in range(0, len(WP3['Energía (keV)'])):
  if i>20 and i<100:
    if abs(WP3['Intensidad (photons keV^-1 cm^-2)'][i+1]-WP3['Intensidad (photons keV^-1 cm^-2)'][i])>2 or abs(WP3['Intensidad (photons keV^-1 cm^-2)'][i]-WP3['Intensidad (photons keV^-1 cm^-2)'][i-1]) > 2:
      Wpicos["Energía (keV)"].append(WP3["Energía (keV)"][i])
      Wpicos['Intensidad (photons keV^-1 cm^-2)'].append(WP3['Intensidad (photons keV^-1 cm^-2)'][i])
    else:
      WC3["Energía (keV)"].append(WP3["Energía (keV)"][i])
      WC3["Intensidad (photons keV^-1 cm^-2)"].append(WP3["Intensidad (photons keV^-1 cm^-2)"][i])


ax3.plot(WC3['Energía (keV)'], WC3['Intensidad (photons keV^-1 cm^-2)'], color="purple", label="Barriga")
ax3.scatter(WC3['Energía (keV)'], WC3['Intensidad (photons keV^-1 cm^-2)'], color="purple", s=7)
ax3.scatter(Wpicos['Energía (keV)'], Wpicos['Intensidad (photons keV^-1 cm^-2)'], color="violet", label="Picos removidos por diferencia entre concecutivos")
ax3.set_title("Tubo de Tungsteno (W) 30 kV")

plt.xlabel("Energía (keV)")
plt.ylabel("Intensidad (photons keV^-1 cm^-2)", loc="bottom")
fig.suptitle("Espectros de tubos de rayos X")
ax1.legend()
ax2.legend()
ax3.legend()

plt.savefig("2.a.pdf", bbox_inches="tight", pad_inches=0.1)

#Eliminación de picos
def eliminar_picos(X, Y,R, tol=1.4):
  Apicos=[[],[]]
  Abase=[[],[]]
  for i in range(0, len(X)):
    if i>R and i<len(X)-3:
      if abs(Y[i+1]-Y[i])>tol or abs(Y[i]-Y[i-1]) > tol:
        Apicos[0].append(X[i])
        Apicos[1].append(Y[i])
      else:
        Abase[0].append(X[i])
        Abase[1].append(Y[i])
    else:
        Abase[0].append(X[i])
        Abase[1].append(Y[i])

  Apicos=np.array(Apicos)
  Abase=np.array(Abase)
  return Apicos, Abase

WWWpico, WWWbase=eliminar_picos(RH[40]['Energía (keV)'], RH[40]['Intensidad (photons keV^-1 cm^-2)'], 50)
plt.plot(WWWpico[0], WWWpico[1], color="violet")
plt.plot(WWWbase[0], WWWbase[1], color="purple")
plt.scatter(RH[40]['Energía (keV)'], RH[40]['Intensidad (photons keV^-1 cm^-2)'], c="skyblue")

def org (DF,R):
  BaseDF=[]
  PicoDF=[]
  for i in range(0, len(DF)):
    PICOS, BARR = eliminar_picos(DF[i]['Energía (keV)'], DF[i]['Intensidad (photons keV^-1 cm^-2)'],R)
    BaseDF.append(BARR)
    PicoDF.append(PICOS)
  return BaseDF, PicoDF

def org2 (DF):
  BaseDF=[]
  PicoDF=[]
  for i in range(0, len(DF)):
    PICOS, BARR = eliminar_picos(DF[i][0], DF[i][1])
    BaseDF.append(BARR)
    PicoDF.append(PICOS)
  return BaseDF, PicoDF
BasesMOs, PicosMOs=org(MO, 60)
BaseRH, PicoRH=org(RH, 60)
BaseW, PicoW=org(W, 20)
for i in range(0, len(BasesMOs)):
  plt.plot(BasesMOs[i][0], BasesMOs[i][1])
plt.show()
for i in range(0, len(BaseRH)):
  plt.plot(BaseRH[i][0], BaseRH[i][1])
plt.show()
for i in range(0, len(BaseW)):
  plt.plot(BaseW[i][0], BaseW[i][1])
plt.show()

for i in range(0, len(PicoW)):
  plt.plot(PicoRH[i][0], PicoRH[i][1])

from scipy.interpolate import RBFInterpolator
def interpolar (X,Y, s):
  Xnew=np.array(X)
  Ynew=np.array(Y)
  f1 = RBFInterpolator(Xnew[:,None], Ynew, smoothing=s)
  x_interp = np.linspace(min(X), max(X), 1000)
  y_interp = f1(x_interp[:,None])
  return x_interp, y_interp, f1

def interpolar2 (X,Y, s):
  Xnew=np.array(X)
  Ynew=np.array(Y)
  f1 = RBFInterpolator(Xnew[:,None], Ynew, smoothing=s)
  return f1
FM1=[]
for i in range(0, len(BasesMOs)):
  xintM, yintM, fM=interpolar(BasesMOs[i][0], BasesMOs[i][1], 5.0)
  plt.plot(xintM, yintM)
  FM1.append(fM)
plt.show()
FR1=[]
for i in range(0, len(BaseRH)):
  xintR, yintR, fR=interpolar(BaseRH[i][0], BaseRH[i][1], 7.0)
  plt.plot(xintR, yintR)
  FR1.append(fR)
plt.show()
FW1=[]
for i in range(0, len(BaseW)):
  xintW, yintW, fw=interpolar(BaseW[i][0], BaseW[i][1], 7.0)
  plt.plot(xintW, yintW)
  FW1.append(fw)
plt.show()

fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 10),gridspec_kw={'height_ratios': [3, 3, 3]})
Tub=[0,10,20,30,40]
col=["red", "orangered", "orange", "gold","yellow" ]
col2=["green", "greenyellow", "teal", "blue","purple" ]
j=0
for i in Tub:
  xintM, yintM, FM=interpolar(BasesMOs[i][0], BasesMOs[i][1], 5.0)
  ax1.plot(xintM,yintM, label=str(i+10)+"kV", color=col[j])
  ax1.scatter(BasesMOs[i][0], BasesMOs[i][1], color=col[j], s=7)
  xintR, yintR, FR=interpolar(BaseRH[i][0], BaseRH[i][1], 7.0)
  ax2.plot(xintR,yintR, label=str(i+10)+"kV")
  ax2.scatter(BaseRH[i][0], BaseRH[i][1], s=7)
  xintW, yintW, Fw=interpolar(BaseW[i][0], BaseW[i][1], 7.0)
  ax3.plot(xintW,yintW, label=str(i+10)+"kV", color=col2[j])
  ax3.scatter(BaseW[i][0], BaseW[i][1], color=col2[j], s=7)
  j+=1
ax1.legend()
ax2.legend()
ax3.legend()
ax1.set_title("Tubo de Molibdeno (Mo)")
ax2.set_title("Tubo de Rodio (Rh)")
ax3.set_title("Tubo de Tungsteno (W)")
plt.xlabel("Energía (keV)")
plt.ylabel("Intensidad (photons keV^-1 cm^-2)", loc="bottom")
fig.suptitle("Espectros de tubos de rayos X Interpolados")
plt.savefig("2.b.pdf", bbox_inches="tight", pad_inches=0.1)

import scipy.optimize as opt
_,_,FuncionL=interpolar(MOC4["Energía (keV)"],MOC4['Intensidad (photons keV^-1 cm^-2)'], s=5.0)
FuncionL(np.array(MOP5["Energía (keV)"])[:,None])
def inversa(x):
    return -FuncionL(x.reshape(-1, 1))[0]
sol=opt.minimize(inversa, x0=np.array([15]))
xfict=np.linspace(min(MOP5["Energía (keV)"]), max(MOP5["Energía (keV)"]), 1000)
plt.plot(xfict, FuncionL(xfict[:,None]))
plt.scatter(sol['x'], FuncionL(sol['x'][:,None]))
print(sol['x'])

def maxxy (FT,x00, dx=0.1):
  def inversa(x):
    return -FT(x.reshape(-1, 1))[0]
  solucion=opt.minimize(inversa,x0=x00)
  Emax=solucion["x"]
  MAX=FT(Emax[:,None])
  mediaaltura=MAX/2
  xfict=np.linspace(0,50,10000)
  yfict=FT(xfict[:,None])
  Yf=[]
  for i in range(0, len(xfict)):
    if abs(yfict[i]-mediaaltura)<=dx:
      Yf.append(i)
  anch=0
  if len(Yf)!=0:
    anch=xfict[Yf[0]]-xfict[Yf[-1]]
  return Emax, MAX, anch
EMmax=[]
Mmax=[]
Manch=[]
for i in FM1:
  emax, maxi, ancho=maxxy(i, np.array([15]))
  EMmax.append(emax)
  Mmax.append(maxi)
  Manch.append(ancho)
ERmax=[]
Rmax=[]
Ranch=[]
for i in FR1:
  emax2, maxi2, ancho2=maxxy(i, np.array([15]))
  ERmax.append(emax2)
  Rmax.append(maxi2)
  Ranch.append(ancho2)
EWmax=[]
Wmax=[]
Wanch=[]
for i in FW1:
  emax3, maxi3, ancho3=maxxy(i, np.array([15]), 0.01)
  EWmax.append(emax3)
  Wmax.append(maxi3)
  Wanch.append(ancho3)
V=np.array(np.linspace(10, 50, 41))
fig, axes = plt.subplots(2, 2, figsize=(11, 15),gridspec_kw={'height_ratios': [3, 3]})
ax1, ax2, ax3, ax4 = axes.flatten()
ax1.plot(V, EWmax, color="maroon", label="Tungsteno (W)")
ax2.plot(V,Wmax, color="orangered", label="Tungsteno (W)")
ax3.plot(EWmax, Wmax, color="green", label="Tungsteno (W)")
ax4.plot(V, Wanch, color="navy", label="Tungsteno (W)")
ax1.plot(V, EMmax, color="red", label="Molibdeno (Mo)")
ax2.plot(V,Mmax, color="orange", label="Molibdeno (Mo)")
ax3.plot(EMmax, Mmax, color="yellowgreen", label="Molibdeno (Mo)")
ax4.plot(V, Manch, color="teal", label="Molibdeno (Mo)")
ax1.plot(V, ERmax, color="salmon", label="Rodio (Rh)")
ax2.plot(V,Rmax, color="coral", label="Rodio (Rh)")
ax3.plot(ERmax, Rmax, color="palegreen", label="Rodio (Rh)")
ax4.plot(V, Ranch, color="skyblue", label="Rodio (Rh)")
ax1.set_title("Voltaje frente a Energia del máximo")
ax2.set_title("Voltaje frente al máximo")
ax3.set_title("Energia del maximo frente a máximo")
ax4.set_title("Voltaje frente al ancho del continuo")
ax1.set_xlabel("Voltaje (kV)")
ax2.set_xlabel("Voltaje (kV)")
ax3.set_xlabel("Energía del máximo (keV)")
ax4.set_xlabel("Voltaje (kV)")
ax1.set_ylabel("Energía del máximo (keV)")
ax2.set_ylabel("Intensidad del máximo (photons keV^-1 cm^-2)")
ax3.set_ylabel("Intensidad del máximo (photons keV^-1 cm^-2)")
ax4.set_ylabel("Ancho del continuo (keV)")
ax1.legend()
ax2.legend()
ax3.legend()
ax4.legend()
fig.suptitle("Valores maximos, ubicación del máximo y ancho de los tubos", fontsize=16)
plt.tight_layout()
plt.savefig("2.c.pdf", bbox_inches="tight", pad_inches=0.1)

import matplotlib.cm as cm
fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(5, 8),gridspec_kw={'height_ratios': [3, 3, 3]})
# ----- 1. PicoW -----
num_lines = len(PicoW)
for i in range(len(PicoW)):
    cmap=cm.Reds
    color1 = cmap(i / num_lines)
    ax1.plot(PicoW[i][0], PicoW[i][1], color= color1)
ax1.set_title('Tungsteno (W)')
ax1.set_xlim(7.9, 12)
ax1.set_xlabel('Energia(keV)')
ax1.set_ylabel('Intensidad')

# ----- 2. PicosMOs -----
for i in range(len(PicosMOs)):
    cmap=cm.Blues
    color2 = cmap(i / num_lines)
    ax2.plot(PicosMOs[i][0], PicosMOs[i][1], color=color2)
ax2.set_title('Molibdeno (Mo)')
ax2.set_xlabel('Energia(keV)')
ax2.set_ylabel('Intensidad')

# ----- 3. PicoRH -----
for i in range(len(PicoRH)):
    cmap=cm.Greens
    color3 = cmap(i / num_lines)
    ax3.plot(PicoRH[i][0], PicoRH[i][1], color=color3)
ax3.set_title('Rodio (Rh)')
ax3.set_xlabel('Energia(keV)')
ax3.set_ylabel('Intensidad"')
plt.tight_layout()


plt.savefig("3.a.pdf", bbox_inches="tight", pad_inches=0.1)

def extraer_region_pico(lista_picos, ventana=1.0):
    espectros_pico = []
    for xdata, ydata in lista_picos:
        if len(xdata) == 0 or len(ydata) == 0 or np.all(np.isnan(ydata)):
            espectros_pico.append((np.array([]), np.array([])))
            continue

        idx_max = np.nanargmax(ydata)
        x_peak = xdata[idx_max]

        mask = (xdata >= x_peak - ventana) & (xdata <= x_peak + ventana)

        espectros_pico.append((xdata[mask], ydata[mask]))

    return espectros_pico

PicoW_altos  = extraer_region_pico(PicoW, ventana=1.0)
PicoW_altos= PicoW_altos[11:]
PicoMo_altos = extraer_region_pico(PicosMOs, ventana=1.0)
PicoRh_altos = extraer_region_pico(PicoRH, ventana=1.0)

fig, axs = plt.subplots(3, 1, figsize=(8, 10), sharex=False)

# --- W ---
for x, y in PicoW_altos:
    if len(x) > 0:
        axs[0].plot(x, y)
axs[0].set_title("Picos altos Tungsteno")
axs[0].set_ylabel("Conteo de fotones")

# --- Mo ---
for x, y in PicoMo_altos:
    if len(x) > 0:
        axs[1].plot(x, y)
axs[1].set_title("Picos altos Molibdeno")
axs[1].set_ylabel("Conteo de fotones")

# --- Rh ---
for x, y in PicoRh_altos:
    if len(x) > 0:
        axs[2].plot(x, y)
axs[2].set_title("Picos altos Rodio")
axs[2].set_xlabel("Energía (keV)")
axs[2].set_ylabel("Conteo de fotones")

plt.tight_layout()
plt.show()

def gauss(x, A, x0, sigma):
    return A * np.exp(-(x - x0)**2 / (2 * sigma**2))

def ajustar_gauss_lista(lista_picos):
    resultados = []
    for xdata, ydata in lista_picos:
        if len(xdata) < 3 or np.all(np.isnan(ydata)):
            resultados.append(None)
            continue

        # Estimaciones iniciales
        A0 = float(np.nanmax(ydata))
        x0_0 = float(xdata[np.nanargmax(ydata)])
        sigma0 = (xdata.max() - xdata.min()) / 6  # estimación inicial

        try:
            popt, _ = opt.curve_fit(
                gauss, xdata, ydata,
                p0=[A0, x0_0, sigma0],
                bounds=([0, xdata.min(), 1e-6], [np.inf, xdata.max(), np.inf]),
                maxfev=10000
            )
            resultados.append(tuple(popt))  # (A, x0, sigma)
        except Exception:
            resultados.append(None)

    return resultados

params_W  = ajustar_gauss_lista(PicoW_altos)
params_Mo = ajustar_gauss_lista(PicoMo_altos)
params_Rh = ajustar_gauss_lista(PicoRh_altos)

# Ejemplo: imprimir el primer resultado de W
if params_W[0] is not None:
    A, x0, sigma = params_W[0]
    FWHM = 2*np.sqrt(2*np.log(2))*sigma

voltajes_full = list(range(10, 51))

def params_a_df(params, voltajes, elemento):
    if len(params) < len(voltajes):
        params = params + [None] * (len(voltajes) - len(params))
    elif len(params) > len(voltajes):
        params = params[:len(voltajes)]

    A_list, x0_list, sigma_list = [], [], []
    for p in params:
        if p is None:
            A_list.append(np.nan)
            x0_list.append(np.nan)
            sigma_list.append(np.nan)
        else:
            A, x0, sigma = p
            A_list.append(A)
            x0_list.append(x0)
            sigma_list.append(sigma)

    FWHM_list = 2*np.sqrt(2*np.log(2))*np.array(sigma_list)
    return pd.DataFrame({
        "Elemento": elemento,
        "Voltaje_kV": voltajes,
        "Altura": A_list,
        "Posicion": x0_list,
        "FWHM": FWHM_list
    })

# Crear DataFrames
df_W  = params_a_df(params_W,  voltajes_full, "W")
df_Mo = params_a_df(params_Mo, voltajes_full, "Mo")
df_Rh = params_a_df(params_Rh, voltajes_full, "Rh")

# Unir todo
df_todos = pd.concat([df_W, df_Mo, df_Rh], ignore_index=True)

# --- Gráficas ---
fig, axs = plt.subplots(1, 2, figsize=(10, 4))


colores=["teal", "yellowgreen", "purple"]
i=0
for elem, g in df_todos.groupby("Elemento"):
    col=colores[i]
    axs[0].plot(g["Voltaje_kV"], g["Altura"], marker='o', label=elem, color=col)
    i+=1
axs[0].set_xlabel("Voltaje (kV)")
axs[0].set_ylabel("Altura del pico")
axs[0].set_title("Altura del pico frente a Voltaje")
axs[0].legend()

# FWHM vs kV
colores2=["maroon", "orange", "gold"]
i=0
for elem, g in df_todos.groupby("Elemento"):
    axs[1].plot(g["Voltaje_kV"], g["FWHM"], marker='o', label=elem, color=colores2[i])
    i+=1
axs[1].set_xlabel("Voltaje (kV)")
axs[1].set_ylabel("FWHM")
axs[1].set_title("FWHM frente a Voltaje")
axs[1].legend()

plt.tight_layout()
plt.savefig("3.b.pdf", bbox_inches="tight", pad_inches=0.1)